// recibe 3 comandos para realizar tareas
// dos de ellos solo le ordenan ejecutar acciones
// que seran el encendido de leds
// uno de ellos le pregunta al arduino mega que envie el valor de 
// lectura analógica del canal0
// LED13!  se ordena encender el led 13 (el de la tarjeta)
// LED08!  se ordena encender el led 8 (el de la tarjeta)
// ADC00!  se ordena leer el canal analogico 0 y enviar el resulatdo
// ADC01!  se ordena leer el canal analogico 1 y enviar el resulatdo
// la forma en que responde el micro es
// ADC00#VALOR! o ADC01#VALOR!

#include <Arduino.h>
#define led1 18
#define led2 19

int raw = 0;

String comando = "";
String cabecera = "";
String num_str = "";
String num_pwm = "";
bool cmd_ok = false;
uint16_t res_adc;

#define DAC_CH1 26

#define DUTY_MAX_MOTOR 1023
#define PIN_PWM_MOTOR 32
#define CANAL_PWM_MOTOR 3
#define RES_BITS_MOTOR 10
#define FREC_PWM_MOTOR  100

unsigned long tinicio = 0;
unsigned long tactual = 0;

u_int dutyCycle_motor = 0;

void lectura_serial(void);
void dientedesierra(void);

void setup() {
  ledcSetup(CANAL_PWM_MOTOR, FREC_PWM_MOTOR, RES_BITS_MOTOR); // Configurar el canal PWM con frecuencia de 100 Hz y resolución de 10 bits
  ledcAttachPin(PIN_PWM_MOTOR, CANAL_PWM_MOTOR); // Asociar el pin motor al canal PWM

  pinMode(led1, OUTPUT);
  digitalWrite(led1, LOW);
  pinMode(led2, OUTPUT);
  digitalWrite(led2, LOW);
  Serial2.begin(115200);
  comando.reserve(50);
}

void loop() {
  lectura_serial();
  dientedesierra();
  
  if (cmd_ok) {
    cabecera = comando.substring(0, 3);
    num_str = comando.substring(3, 5);
    if (cabecera.equals("LED")) {
      digitalWrite(num_str.toInt(), !digitalRead(num_str.toInt()));
    } else if (cabecera.equals("ADC")) {
      res_adc = analogRead(num_str.toInt());
      Serial2.print(cabecera + num_str + "#" + res_adc + "!");
    }
    else if (cabecera.equals("PWM")) {
      num_pwm = comando.substring(3, 6);
      dutyCycle_motor = num_pwm.toInt();
      Serial2.print("La señal" + cabecera + num_str + "#" + "!");
    }
    comando = "";
    cmd_ok = false;
  }

  ledcWrite(CANAL_PWM_MOTOR, dutyCycle_motor); // Escribir el ciclo de trabajo en el canal PWM
}

void lectura_serial(void) {
  while (Serial2.available()) {
    char inChar = (char)Serial2.read();
    comando += inChar;
    if (inChar == '!') {
      cmd_ok = true;
    }
  }
}

void dientedesierra(void) {
  tactual = millis();
  if (tactual - tinicio >= 15) { // Comparar el tiempo actual con el tiempo anterior
    tinicio = tactual; // Guardar el tiempo actual como el último tiempo de muestreo
    dacWrite(DAC_CH1, raw); // Escribir el valor actual al DAC
    raw++; // Incrementar el valor
    if (raw > 255) {
      raw = 0; // Resetear el valor si supera 255
    }
  }
}
